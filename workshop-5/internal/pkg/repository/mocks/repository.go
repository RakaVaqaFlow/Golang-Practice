// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "gitlab.ozon.dev/workshop/internal/pkg/repository"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUsersRepo) Add(ctx context.Context, user *repository.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockUsersRepoMockRecorder) Add(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUsersRepo)(nil).Add), ctx, user)
}

// GetById mocks base method.
func (m *MockUsersRepo) GetById(ctx context.Context, id int64) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUsersRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUsersRepo)(nil).GetById), ctx, id)
}

// List mocks base method.
func (m *MockUsersRepo) List(ctx context.Context) ([]*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUsersRepoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsersRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockUsersRepo) Update(ctx context.Context, user *repository.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUsersRepoMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepo)(nil).Update), ctx, user)
}

// MockUsersRepoCached is a mock of UsersRepoCached interface.
type MockUsersRepoCached struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoCachedMockRecorder
}

// MockUsersRepoCachedMockRecorder is the mock recorder for MockUsersRepoCached.
type MockUsersRepoCachedMockRecorder struct {
	mock *MockUsersRepoCached
}

// NewMockUsersRepoCached creates a new mock instance.
func NewMockUsersRepoCached(ctrl *gomock.Controller) *MockUsersRepoCached {
	mock := &MockUsersRepoCached{ctrl: ctrl}
	mock.recorder = &MockUsersRepoCachedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepoCached) EXPECT() *MockUsersRepoCachedMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUsersRepoCached) Add(ctx context.Context, user *repository.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUsersRepoCachedMockRecorder) Add(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUsersRepoCached)(nil).Add), ctx, user)
}

// Get mocks base method.
func (m *MockUsersRepoCached) Get(ctx context.Context, id int64) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersRepoCachedMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersRepoCached)(nil).Get), ctx, id)
}

// GetMulti mocks base method.
func (m *MockUsersRepoCached) GetMulti(ctx context.Context, ids []*int64) ([]*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, ids)
	ret0, _ := ret[0].([]*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockUsersRepoCachedMockRecorder) GetMulti(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockUsersRepoCached)(nil).GetMulti), ctx, ids)
}

// MockUserAbstract is a mock of UserAbstract interface.
type MockUserAbstract struct {
	ctrl     *gomock.Controller
	recorder *MockUserAbstractMockRecorder
}

// MockUserAbstractMockRecorder is the mock recorder for MockUserAbstract.
type MockUserAbstractMockRecorder struct {
	mock *MockUserAbstract
}

// NewMockUserAbstract creates a new mock instance.
func NewMockUserAbstract(ctrl *gomock.Controller) *MockUserAbstract {
	mock := &MockUserAbstract{ctrl: ctrl}
	mock.recorder = &MockUserAbstractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAbstract) EXPECT() *MockUserAbstractMockRecorder {
	return m.recorder
}

// SomeFunc mocks base method.
func (m *MockUserAbstract) SomeFunc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SomeFunc")
}

// SomeFunc indicates an expected call of SomeFunc.
func (mr *MockUserAbstractMockRecorder) SomeFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SomeFunc", reflect.TypeOf((*MockUserAbstract)(nil).SomeFunc))
}
