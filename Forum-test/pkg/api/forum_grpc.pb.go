// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/forum.proto

package api

import (
	context "context"
	models "github.com/storm5758/Forum-test/pkg/api/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForumClient is the client API for Forum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumClient interface {
	// Создание форума
	//
	// Создание нового форума.
	ForumCreate(ctx context.Context, in *ForumCreateRequest, opts ...grpc.CallOption) (*models.Forum, error)
	// Получение информации о форуме
	//
	// Получение информации о форуме по его идентификаторе.
	ForumGetOne(ctx context.Context, in *ForumGetOneRequest, opts ...grpc.CallOption) (*models.Forum, error)
	// Список ветвей обсужления форума
	//
	// Получение списка ветвей обсужления данного форума.
	//
	// Ветви обсуждения выводятся отсортированные по дате создания.
	ForumGetThreads(ctx context.Context, in *ForumGetThreadsRequest, opts ...grpc.CallOption) (*models.Thread, error)
	// Пользователи данного форума
	//
	// Получение списка пользователей, у которых есть пост или ветка обсуждения в данном форуме.
	//
	// Пользователи выводятся отсортированные по nickname в порядке возрастания.
	// Порядок сотрировки должен соответсвовать побайтовому сравнение в нижнем регистре.
	ForumGetUsers(ctx context.Context, in *ForumGetUsersRequest, opts ...grpc.CallOption) (*ForumGetUsersResponse, error)
}

type forumClient struct {
	cc grpc.ClientConnInterface
}

func NewForumClient(cc grpc.ClientConnInterface) ForumClient {
	return &forumClient{cc}
}

func (c *forumClient) ForumCreate(ctx context.Context, in *ForumCreateRequest, opts ...grpc.CallOption) (*models.Forum, error) {
	out := new(models.Forum)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Forum/ForumCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ForumGetOne(ctx context.Context, in *ForumGetOneRequest, opts ...grpc.CallOption) (*models.Forum, error) {
	out := new(models.Forum)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Forum/ForumGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ForumGetThreads(ctx context.Context, in *ForumGetThreadsRequest, opts ...grpc.CallOption) (*models.Thread, error) {
	out := new(models.Thread)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Forum/ForumGetThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) ForumGetUsers(ctx context.Context, in *ForumGetUsersRequest, opts ...grpc.CallOption) (*ForumGetUsersResponse, error) {
	out := new(ForumGetUsersResponse)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Forum/ForumGetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServer is the server API for Forum service.
// All implementations must embed UnimplementedForumServer
// for forward compatibility
type ForumServer interface {
	// Создание форума
	//
	// Создание нового форума.
	ForumCreate(context.Context, *ForumCreateRequest) (*models.Forum, error)
	// Получение информации о форуме
	//
	// Получение информации о форуме по его идентификаторе.
	ForumGetOne(context.Context, *ForumGetOneRequest) (*models.Forum, error)
	// Список ветвей обсужления форума
	//
	// Получение списка ветвей обсужления данного форума.
	//
	// Ветви обсуждения выводятся отсортированные по дате создания.
	ForumGetThreads(context.Context, *ForumGetThreadsRequest) (*models.Thread, error)
	// Пользователи данного форума
	//
	// Получение списка пользователей, у которых есть пост или ветка обсуждения в данном форуме.
	//
	// Пользователи выводятся отсортированные по nickname в порядке возрастания.
	// Порядок сотрировки должен соответсвовать побайтовому сравнение в нижнем регистре.
	ForumGetUsers(context.Context, *ForumGetUsersRequest) (*ForumGetUsersResponse, error)
	mustEmbedUnimplementedForumServer()
}

// UnimplementedForumServer must be embedded to have forward compatible implementations.
type UnimplementedForumServer struct {
}

func (UnimplementedForumServer) ForumCreate(context.Context, *ForumCreateRequest) (*models.Forum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumCreate not implemented")
}
func (UnimplementedForumServer) ForumGetOne(context.Context, *ForumGetOneRequest) (*models.Forum, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumGetOne not implemented")
}
func (UnimplementedForumServer) ForumGetThreads(context.Context, *ForumGetThreadsRequest) (*models.Thread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumGetThreads not implemented")
}
func (UnimplementedForumServer) ForumGetUsers(context.Context, *ForumGetUsersRequest) (*ForumGetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForumGetUsers not implemented")
}
func (UnimplementedForumServer) mustEmbedUnimplementedForumServer() {}

// UnsafeForumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServer will
// result in compilation errors.
type UnsafeForumServer interface {
	mustEmbedUnimplementedForumServer()
}

func RegisterForumServer(s grpc.ServiceRegistrar, srv ForumServer) {
	s.RegisterService(&Forum_ServiceDesc, srv)
}

func _Forum_ForumCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ForumCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Forum/ForumCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ForumCreate(ctx, req.(*ForumCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ForumGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ForumGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Forum/ForumGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ForumGetOne(ctx, req.(*ForumGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ForumGetThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumGetThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ForumGetThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Forum/ForumGetThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ForumGetThreads(ctx, req.(*ForumGetThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_ForumGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForumGetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).ForumGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Forum/ForumGetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).ForumGetUsers(ctx, req.(*ForumGetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forum_ServiceDesc is the grpc.ServiceDesc for Forum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.moguchev.BD_Forum.api.Forum",
	HandlerType: (*ForumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForumCreate",
			Handler:    _Forum_ForumCreate_Handler,
		},
		{
			MethodName: "ForumGetOne",
			Handler:    _Forum_ForumGetOne_Handler,
		},
		{
			MethodName: "ForumGetThreads",
			Handler:    _Forum_ForumGetThreads_Handler,
		},
		{
			MethodName: "ForumGetUsers",
			Handler:    _Forum_ForumGetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/forum.proto",
}
