// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: api/thread.proto

package api

import (
	models "github.com/storm5758/Forum-test/pkg/api/models"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThreadGetPostsRequest_ThreadGetPostsRequestSort int32

const (
	ThreadGetPostsRequest_THREAD_GET_POSTS_REQUEST_SORT_FLAT        ThreadGetPostsRequest_ThreadGetPostsRequestSort = 0
	ThreadGetPostsRequest_THREAD_GET_POSTS_REQUEST_SORT_TREE        ThreadGetPostsRequest_ThreadGetPostsRequestSort = 1
	ThreadGetPostsRequest_THREAD_GET_POSTS_REQUEST_SORT_PARENT_TREE ThreadGetPostsRequest_ThreadGetPostsRequestSort = 2
)

// Enum value maps for ThreadGetPostsRequest_ThreadGetPostsRequestSort.
var (
	ThreadGetPostsRequest_ThreadGetPostsRequestSort_name = map[int32]string{
		0: "THREAD_GET_POSTS_REQUEST_SORT_FLAT",
		1: "THREAD_GET_POSTS_REQUEST_SORT_TREE",
		2: "THREAD_GET_POSTS_REQUEST_SORT_PARENT_TREE",
	}
	ThreadGetPostsRequest_ThreadGetPostsRequestSort_value = map[string]int32{
		"THREAD_GET_POSTS_REQUEST_SORT_FLAT":        0,
		"THREAD_GET_POSTS_REQUEST_SORT_TREE":        1,
		"THREAD_GET_POSTS_REQUEST_SORT_PARENT_TREE": 2,
	}
)

func (x ThreadGetPostsRequest_ThreadGetPostsRequestSort) Enum() *ThreadGetPostsRequest_ThreadGetPostsRequestSort {
	p := new(ThreadGetPostsRequest_ThreadGetPostsRequestSort)
	*p = x
	return p
}

func (x ThreadGetPostsRequest_ThreadGetPostsRequestSort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadGetPostsRequest_ThreadGetPostsRequestSort) Descriptor() protoreflect.EnumDescriptor {
	return file_api_thread_proto_enumTypes[0].Descriptor()
}

func (ThreadGetPostsRequest_ThreadGetPostsRequestSort) Type() protoreflect.EnumType {
	return &file_api_thread_proto_enumTypes[0]
}

func (x ThreadGetPostsRequest_ThreadGetPostsRequestSort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThreadGetPostsRequest_ThreadGetPostsRequestSort.Descriptor instead.
func (ThreadGetPostsRequest_ThreadGetPostsRequestSort) EnumDescriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{2, 0}
}

type ThreadCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор форума.
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	// Данные ветки обсуждения.
	Thread *models.Thread `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *ThreadCreateRequest) Reset() {
	*x = ThreadCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_thread_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadCreateRequest) ProtoMessage() {}

func (x *ThreadCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_thread_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadCreateRequest.ProtoReflect.Descriptor instead.
func (*ThreadCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{0}
}

func (x *ThreadCreateRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ThreadCreateRequest) GetThread() *models.Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

type ThreadGetOneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор ветки обсуждения.
	SlugOrId string `protobuf:"bytes,1,opt,name=slug_or_id,json=slugOrId,proto3" json:"slug_or_id,omitempty"`
}

func (x *ThreadGetOneRequest) Reset() {
	*x = ThreadGetOneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_thread_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadGetOneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadGetOneRequest) ProtoMessage() {}

func (x *ThreadGetOneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_thread_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadGetOneRequest.ProtoReflect.Descriptor instead.
func (*ThreadGetOneRequest) Descriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{1}
}

func (x *ThreadGetOneRequest) GetSlugOrId() string {
	if x != nil {
		return x.SlugOrId
	}
	return ""
}

type ThreadGetPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Флаг сортировки по убыванию.
	Desc bool `protobuf:"varint,1,opt,name=desc,proto3" json:"desc,omitempty"`
	// Максимальное кол-во возвращаемых записей.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Идентификатор поста, после которого будут выводиться записи
	// (пост с данным идентификатором в результат не попадает).
	Since int64 `protobuf:"varint,3,opt,name=since,proto3" json:"since,omitempty"`
	// Идентификатор ветки обсуждения.
	SlugOrId string `protobuf:"bytes,4,opt,name=slug_or_id,json=slugOrId,proto3" json:"slug_or_id,omitempty"`
	// Вид сортировки:
	//
	//  * flat - по дате, комментарии выводятся простым списком в порядке создания;
	//  * tree - древовидный, комментарии выводятся отсортированные в дереве
	//    по N штук;
	//  * parent_tree - древовидные с пагинацией по родительским (parent_tree),
	//    на странице N родительских комментов и все комментарии прикрепленные
	//    к ним, в древвидном отображение.
	//
	// Подробности: https://park.mail.ru/blog/topic/view/1191/
	Sort ThreadGetPostsRequest_ThreadGetPostsRequestSort `protobuf:"varint,5,opt,name=sort,proto3,enum=github.moguchev.BD_Forum.api.ThreadGetPostsRequest_ThreadGetPostsRequestSort" json:"sort,omitempty"`
}

func (x *ThreadGetPostsRequest) Reset() {
	*x = ThreadGetPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_thread_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadGetPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadGetPostsRequest) ProtoMessage() {}

func (x *ThreadGetPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_thread_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadGetPostsRequest.ProtoReflect.Descriptor instead.
func (*ThreadGetPostsRequest) Descriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadGetPostsRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *ThreadGetPostsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ThreadGetPostsRequest) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *ThreadGetPostsRequest) GetSlugOrId() string {
	if x != nil {
		return x.SlugOrId
	}
	return ""
}

func (x *ThreadGetPostsRequest) GetSort() ThreadGetPostsRequest_ThreadGetPostsRequestSort {
	if x != nil {
		return x.Sort
	}
	return ThreadGetPostsRequest_THREAD_GET_POSTS_REQUEST_SORT_FLAT
}

type ThreadUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор ветки обсуждения.
	SlugOrId string `protobuf:"bytes,1,opt,name=slug_or_id,json=slugOrId,proto3" json:"slug_or_id,omitempty"`
	// Данные ветки обсуждения.
	Thread *ThreadUpdateRequest_ThreadUpdate `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *ThreadUpdateRequest) Reset() {
	*x = ThreadUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_thread_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadUpdateRequest) ProtoMessage() {}

func (x *ThreadUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_thread_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadUpdateRequest.ProtoReflect.Descriptor instead.
func (*ThreadUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{3}
}

func (x *ThreadUpdateRequest) GetSlugOrId() string {
	if x != nil {
		return x.SlugOrId
	}
	return ""
}

func (x *ThreadUpdateRequest) GetThread() *ThreadUpdateRequest_ThreadUpdate {
	if x != nil {
		return x.Thread
	}
	return nil
}

type ThreadVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор ветки обсуждения.
	SlugOrId string `protobuf:"bytes,1,opt,name=slug_or_id,json=slugOrId,proto3" json:"slug_or_id,omitempty"`
	// Информация о голосовании пользователя.
	Vote *models.Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ThreadVoteRequest) Reset() {
	*x = ThreadVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_thread_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadVoteRequest) ProtoMessage() {}

func (x *ThreadVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_thread_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadVoteRequest.ProtoReflect.Descriptor instead.
func (*ThreadVoteRequest) Descriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{4}
}

func (x *ThreadVoteRequest) GetSlugOrId() string {
	if x != nil {
		return x.SlugOrId
	}
	return ""
}

func (x *ThreadVoteRequest) GetVote() *models.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Сообщение для обновления ветки обсуждения на форуме.
// Пустые параметры остаются без изменений.
type ThreadUpdateRequest_ThreadUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Описание ветки обсуждения.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Заголовок ветки обсуждения.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ThreadUpdateRequest_ThreadUpdate) Reset() {
	*x = ThreadUpdateRequest_ThreadUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_thread_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadUpdateRequest_ThreadUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadUpdateRequest_ThreadUpdate) ProtoMessage() {}

func (x *ThreadUpdateRequest_ThreadUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_thread_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadUpdateRequest_ThreadUpdate.ProtoReflect.Descriptor instead.
func (*ThreadUpdateRequest_ThreadUpdate) Descriptor() ([]byte, []int) {
	return file_api_thread_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ThreadUpdateRequest_ThreadUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ThreadUpdateRequest_ThreadUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_api_thread_proto protoreflect.FileDescriptor

var file_api_thread_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63,
	0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x7a, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x49, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x33, 0x0a, 0x13, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4f, 0x72, 0x49, 0x64,
	0x22, 0xfb, 0x02, 0x0a, 0x15, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6c,
	0x75, 0x67, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4f, 0x72, 0x49, 0x64, 0x12, 0x61,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42,
	0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0x9a, 0x01, 0x0a, 0x19, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x22, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x48, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12,
	0x2d, 0x0a, 0x29, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x02, 0x22, 0xd7,
	0x01, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4f, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x3e, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7c, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x4f, 0x72, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65,
	0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x32, 0x98, 0x06, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x98, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75,
	0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x7d, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x98, 0x01, 0x0a,
	0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x31, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e,
	0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68,
	0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65,
	0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x6d,
	0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67,
	0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3a,
	0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x97, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2e, 0x42, 0x44, 0x5f, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x5f,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x3a, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x6f, 0x67, 0x75, 0x63, 0x68, 0x65, 0x76, 0x2f, 0x42, 0x44, 0x2d, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_thread_proto_rawDescOnce sync.Once
	file_api_thread_proto_rawDescData = file_api_thread_proto_rawDesc
)

func file_api_thread_proto_rawDescGZIP() []byte {
	file_api_thread_proto_rawDescOnce.Do(func() {
		file_api_thread_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_thread_proto_rawDescData)
	})
	return file_api_thread_proto_rawDescData
}

var file_api_thread_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_thread_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_thread_proto_goTypes = []interface{}{
	(ThreadGetPostsRequest_ThreadGetPostsRequestSort)(0), // 0: github.moguchev.BD_Forum.api.ThreadGetPostsRequest.ThreadGetPostsRequestSort
	(*ThreadCreateRequest)(nil),                          // 1: github.moguchev.BD_Forum.api.ThreadCreateRequest
	(*ThreadGetOneRequest)(nil),                          // 2: github.moguchev.BD_Forum.api.ThreadGetOneRequest
	(*ThreadGetPostsRequest)(nil),                        // 3: github.moguchev.BD_Forum.api.ThreadGetPostsRequest
	(*ThreadUpdateRequest)(nil),                          // 4: github.moguchev.BD_Forum.api.ThreadUpdateRequest
	(*ThreadVoteRequest)(nil),                            // 5: github.moguchev.BD_Forum.api.ThreadVoteRequest
	(*ThreadUpdateRequest_ThreadUpdate)(nil),             // 6: github.moguchev.BD_Forum.api.ThreadUpdateRequest.ThreadUpdate
	(*models.Thread)(nil),                                // 7: github.moguchev.BD_Forum.api.models.Thread
	(*models.Vote)(nil),                                  // 8: github.moguchev.BD_Forum.api.models.Vote
}
var file_api_thread_proto_depIdxs = []int32{
	7, // 0: github.moguchev.BD_Forum.api.ThreadCreateRequest.thread:type_name -> github.moguchev.BD_Forum.api.models.Thread
	0, // 1: github.moguchev.BD_Forum.api.ThreadGetPostsRequest.sort:type_name -> github.moguchev.BD_Forum.api.ThreadGetPostsRequest.ThreadGetPostsRequestSort
	6, // 2: github.moguchev.BD_Forum.api.ThreadUpdateRequest.thread:type_name -> github.moguchev.BD_Forum.api.ThreadUpdateRequest.ThreadUpdate
	8, // 3: github.moguchev.BD_Forum.api.ThreadVoteRequest.vote:type_name -> github.moguchev.BD_Forum.api.models.Vote
	1, // 4: github.moguchev.BD_Forum.api.Thread.ThreadCreate:input_type -> github.moguchev.BD_Forum.api.ThreadCreateRequest
	2, // 5: github.moguchev.BD_Forum.api.Thread.ThreadGetOne:input_type -> github.moguchev.BD_Forum.api.ThreadGetOneRequest
	3, // 6: github.moguchev.BD_Forum.api.Thread.ThreadGetPosts:input_type -> github.moguchev.BD_Forum.api.ThreadGetPostsRequest
	4, // 7: github.moguchev.BD_Forum.api.Thread.ThreadUpdate:input_type -> github.moguchev.BD_Forum.api.ThreadUpdateRequest
	5, // 8: github.moguchev.BD_Forum.api.Thread.ThreadVote:input_type -> github.moguchev.BD_Forum.api.ThreadVoteRequest
	7, // 9: github.moguchev.BD_Forum.api.Thread.ThreadCreate:output_type -> github.moguchev.BD_Forum.api.models.Thread
	7, // 10: github.moguchev.BD_Forum.api.Thread.ThreadGetOne:output_type -> github.moguchev.BD_Forum.api.models.Thread
	7, // 11: github.moguchev.BD_Forum.api.Thread.ThreadGetPosts:output_type -> github.moguchev.BD_Forum.api.models.Thread
	7, // 12: github.moguchev.BD_Forum.api.Thread.ThreadUpdate:output_type -> github.moguchev.BD_Forum.api.models.Thread
	7, // 13: github.moguchev.BD_Forum.api.Thread.ThreadVote:output_type -> github.moguchev.BD_Forum.api.models.Thread
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_thread_proto_init() }
func file_api_thread_proto_init() {
	if File_api_thread_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_thread_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_thread_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadGetOneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_thread_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadGetPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_thread_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_thread_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_thread_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadUpdateRequest_ThreadUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_thread_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_thread_proto_goTypes,
		DependencyIndexes: file_api_thread_proto_depIdxs,
		EnumInfos:         file_api_thread_proto_enumTypes,
		MessageInfos:      file_api_thread_proto_msgTypes,
	}.Build()
	File_api_thread_proto = out.File
	file_api_thread_proto_rawDesc = nil
	file_api_thread_proto_goTypes = nil
	file_api_thread_proto_depIdxs = nil
}
