// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/post.proto

package api

import (
	context "context"
	models "github.com/storm5758/Forum-test/pkg/api/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	// Создание новых постов
	//
	// Добавление новых постов в ветку обсуждения на форум.
	//
	// Все посты, созданные в рамках одного вызова данного метода должны иметь одинаковую дату создания (Post.Created).
	PostsCreate(ctx context.Context, in *PostsCreateRequest, opts ...grpc.CallOption) (*models.Post, error)
	// Получение информации о ветке обсуждения
	//
	// Получение информации о ветке обсуждения по его имени.
	PostGetOne(ctx context.Context, in *PostGetOneRequest, opts ...grpc.CallOption) (*models.PostFull, error)
	// Изменение сообщения
	//
	// Изменение сообщения на форуме.
	//
	// Если сообщение поменяло текст, то оно должно получить отметку `isEdited`.
	PostUpdate(ctx context.Context, in *PostUpdateRequest, opts ...grpc.CallOption) (*models.Post, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) PostsCreate(ctx context.Context, in *PostsCreateRequest, opts ...grpc.CallOption) (*models.Post, error) {
	out := new(models.Post)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Post/PostsCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) PostGetOne(ctx context.Context, in *PostGetOneRequest, opts ...grpc.CallOption) (*models.PostFull, error) {
	out := new(models.PostFull)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Post/PostGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) PostUpdate(ctx context.Context, in *PostUpdateRequest, opts ...grpc.CallOption) (*models.Post, error) {
	out := new(models.Post)
	err := c.cc.Invoke(ctx, "/github.moguchev.BD_Forum.api.Post/PostUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	// Создание новых постов
	//
	// Добавление новых постов в ветку обсуждения на форум.
	//
	// Все посты, созданные в рамках одного вызова данного метода должны иметь одинаковую дату создания (Post.Created).
	PostsCreate(context.Context, *PostsCreateRequest) (*models.Post, error)
	// Получение информации о ветке обсуждения
	//
	// Получение информации о ветке обсуждения по его имени.
	PostGetOne(context.Context, *PostGetOneRequest) (*models.PostFull, error)
	// Изменение сообщения
	//
	// Изменение сообщения на форуме.
	//
	// Если сообщение поменяло текст, то оно должно получить отметку `isEdited`.
	PostUpdate(context.Context, *PostUpdateRequest) (*models.Post, error)
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) PostsCreate(context.Context, *PostsCreateRequest) (*models.Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostsCreate not implemented")
}
func (UnimplementedPostServer) PostGetOne(context.Context, *PostGetOneRequest) (*models.PostFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGetOne not implemented")
}
func (UnimplementedPostServer) PostUpdate(context.Context, *PostUpdateRequest) (*models.Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUpdate not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_PostsCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PostsCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Post/PostsCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PostsCreate(ctx, req.(*PostsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_PostGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PostGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Post/PostGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PostGetOne(ctx, req.(*PostGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_PostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.moguchev.BD_Forum.api.Post/PostUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PostUpdate(ctx, req.(*PostUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.moguchev.BD_Forum.api.Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostsCreate",
			Handler:    _Post_PostsCreate_Handler,
		},
		{
			MethodName: "PostGetOne",
			Handler:    _Post_PostGetOne_Handler,
		},
		{
			MethodName: "PostUpdate",
			Handler:    _Post_PostUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/post.proto",
}
