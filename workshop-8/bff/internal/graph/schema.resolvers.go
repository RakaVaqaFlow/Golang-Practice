package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"workshop-8-3/bff/internal/downstreams/api"
	"workshop-8-3/bff/internal/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	tr := otel.Tracer("CreateTodo")
	ctx, span := tr.Start(ctx, "received request")
	span.SetAttributes(attribute.Key("params").String(input.UserID))
	defer span.End()

	id, err := r.TodoAPI.CreateTodo(ctx, api.CreateTodoRequest{
		Text:   input.Text,
		UserID: input.UserID,
	})
	if err != nil {
		return nil, err
	}
	return &model.Todo{
		ID:   id,
		Text: input.Text,
		Done: false,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, pagination model.Pagination) ([]*model.Todo, error) {
	todos, err := r.TodoAPI.ListTodo(ctx, api.ListTodoRequest{
		Pagination: struct {
			Page  int
			Limit int
		}{
			Page:  pagination.Page,
			Limit: pagination.Limit,
		},
		UserID: "",
	})
	if err != nil {
		return nil, err
	}
	result := make([]*model.Todo, 0, len(todos))
	for _, todo := range todos {
		result = append(result, &model.Todo{
			ID:   todo.ID,
			Text: todo.Text,
			Done: false,
		})
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }

func (r *mutationResolver) DeleteTodo(ctx context.Context, id int) (bool, error) {
	ok, err := r.TodoAPI.DeleteByID(ctx, int64(id))
	if err != nil {
		return false, err
	}
	return ok, nil
}

type queryResolver struct{ *Resolver }
